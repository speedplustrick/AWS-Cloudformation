Parameters:
  MaxSizeASG:
    Description: "Enter the Max Size for the ASG"
    Type: String
  MinSizeASG:
    Description: "Enter the Min Size for the ASG"
    Type: String
  DesiredCapacityASG:
    Description: "Enter the desired capacity for the ASG"
    Type: String
  VPCZoneIdentifier:
    Description: "List the Subnet Ids of the instances"
    Type: List<AWS::EC2::Subnet::Id>
  VPC:
    Description: "Enter VPC ID"
    Type: String
  PublicSubnet1:
    Type: String
    Description: The subnet where to launch the service
    Default: subnet-ID
  PublicSubnet2:
    Type: String
    Description: the subnet where to Launch the service
    Default: subnet-ID   
  InstanceType:
    Description: "EC2 instance type"
    Type: String
  ASGName:
    Description: "Enter unique ASG name"
    Type: String
  EC2SecurityGroupName:
    Description: "Enter security group name"
    Type: String 


Mappings: 
  RegionMap: 
    ap-south-1: 
      HVM64: ami-0bcf5425cdc1d8a85 

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref ASGName
      DesiredCapacity: !Ref DesiredCapacityASG
      LaunchConfigurationName: !Ref LaunchConfigfile 
      MaxSize: !Ref MaxSizeASG
      MinSize: !Ref MinSizeASG
      Tags:
        - Key: Name
          Value: Bihar Cfn ASG
          PropagateAtLaunch: 'true'
        - Key: Dept
          Value: Assam Cfn ASG
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier: !Ref VPCZoneIdentifier  

  LaunchConfigfile: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ListS3BucketsInstanceProfile

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic
      GroupName: !Ref EC2SecurityGroupName  
      VpcId: !Ref VPC      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0   
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  

  StateTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      HealthCheckEnabled: "true"
      

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: State-ALB
      Scheme: internet-facing
      LoadBalancerAttributes: 
        - Key: deletion_protection.enabled
          Value: false 
      Type: application
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2         
      SecurityGroups: 
        - sg-01f4c7f23d300704c
      IpAddressType: ipv4

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "redirect" 
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/new/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates: 
      - CertificateARN: arn:aws:acm:ap-south-1:640393631002:certificate/d9c2e954-d4f8-406a-bbd3-e265fbe2c197
      DefaultActions:
      - Order: 1
        TargetGroupArn: !Ref StateTargetGroup
        Type: "forward"

  
  ListS3BucketsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: ListS3BucketsRole
  ListS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ListS3BucketsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource: "*"
      Roles:
      - Ref: ListS3BucketsRole
  ListS3BucketsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"      
